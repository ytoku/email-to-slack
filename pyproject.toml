[tool.poetry]
name = "email-to-slack"
version = "0.1.0"
description = ""
authors = ["ytoku"]

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.32.2"

[tool.poetry.group.dev.dependencies]
types-requests = "^2.28.6"
pylint = "^3.2.4"
pyright = "^1.1.369"
ruff = "^0.5.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
strict = ["."]

[tool.black]
line-length = 79
target-version = ["py38"]

[tool.isort]
profile = "black"
line_length = 79

[tool.pylint]
load-plugins = [
  "pylint.extensions.redefined_loop_name",
]
enable = [
  "bad-inline-option",
  "useless-suppression",
  "deprecated-pragma",
  "use-symbolic-message-instead",
]
disable = [
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "design",
  "global-statement",
  "redefined-builtin",
  "duplicate-code",
]
variable-rgx = "^[a-z_][a-z0-9_]*$"
argument-rgx = "^[a-z_][a-z0-9_]*$"
attr-rgx = "^[a-z_][a-z0-9_]*$"
class-attribute-naming-style = "any"

[tool.ruff]
target-version = "py38"
line-length = 79

[tool.ruff.lint]
select = [
  "F",    # Pyflakes
  "E",    # pycodestyle
  "W",    # pycodestyle
  "I",    # isort
  "N",    # pep8-naming
  "D",   # pydocstyle
  "UP",   # pyupgrade
  "YTT",  # flake8-2020
  "ANN",  # flake8-annotations
  "ASYNC",  # flake8-async
  # "TRIO",  # flake8-trio
  "S",    # flake8-bandit
  # "BLE",  # flake8-blind-except
  "FBT",  # flake8-boolean-trap
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "COM",  # flake8-commas
  # "CPY",  # flake8-copyright
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  # "T10",  # flake8-debugger
  # "DJ",   # flake8-django
  # "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  # "FA",   # flake8-future-annotations
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  # "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  # "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT",  # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  # "TD",   # flake8-todos
  # "FIX",  # flake8-fixme
  # "ERA",  # eradicate
  "PD",   # pandas-vet
  "PGH",  # pygrep-hooks
  "PL",   # Pylint
  "TRY",  # tryceratops
  "FLY",  # flynt
  "NPY",  # NumPy-specific rules
  "AIR",  # Airflow
  "PERF",  # Perflint
  "FURB",  # refurb
  "RUF",  # Ruff-specific rules

  # flake8-return
  "RET501",
  "RET502",
  "RET503",
]
ignore = [
  # docstringなしを許容
  "D10",
  # classのdocstringは空行を開けずに直後に書く方を採用(D203/D211)
  "D203",
  # 複数行のdocstringは2行目に概要を書く方を採用(D212/D213)
  "D213",
  # 日本語はピリオドで終わらない
  "D400",
  "D415",
  # 日本語の記号に対して警告を出力しない
  "RUF001",
  # selfやclsにアノテーションは要らない
  "ANN10",
  # Anyは使用可
  "ANN401",
  # shell=Falseで外部プロセスを起動すると必ず出る
  "S603",
  # Pylint
  # * magic-value-comparison
  "PLR2004",
  # * design
  "PLR09",
  # * else-if-used
  "PLR5501",
  # * global-statement
  "PLW0603",
  # ternary operatorを乱用すべきではない
  "SIM108",
  # x < 1 or 2 < x のようなものまで怒られる
  "SIM300",
  # 専用の例外を作るように求めるもの
  "TRY002",
  "TRY003",
  # タイムアウト時のリトライなど改善のしようがないときに発生する
  "PERF203",
]
